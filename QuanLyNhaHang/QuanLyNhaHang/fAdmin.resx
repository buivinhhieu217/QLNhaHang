<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAB
        AAAAAAAAdU0/AABReQBbTVEAbUxAAGJOSAB8U0QAf1dIAGdZXABpZWQAcXF5AHV0fAB+d3sApzwTALBG
        IQC4ViwAoE80ALhVMgC6WjYAw2E9AIFZTACcXUYAgV9UAIRkWQC4a04Ahm5nAI9zagCDcnsAoHVuAKR0
        bADEaEQAxG1KAMVwTgDJcE4AyXRSAMx3VQDKeFcAzn1bANV+VgDUflsA0X5dAM1/YgCxgHEAzIZqAM2I
        bwDThmYA1oZkAN6JZgDTiWkA1oxsANqKaADYknIA4I5rAOWTbwDjlXMA6p17AO2eewDpnnwA7J99AO6h
        fgAAV4QAAFqGAABchwAAW4kAAGWTAABjlQABb5IAAGuVAABslgAAaZ0AAnKVAARxlgArYoIAMmqLAC9y
        mQAieJ8AAHCiAABzpwAAdKUAAHuuAAB/rwARe6YAAH2wACF7pwBVd5gAAoSkAAGHqwABiq0ABJGvAACB
        sQAEhrIABoO1AACLtwABjLQAAIi6AAaIuQAAi74ACIi5AAyNvwAXhbQAE469AAeSswAgga0AKZK+ACSb
        vgADo7wAcYCIAHGFkQBBjq8AG4DLAACQwgAAksQABZLEAACUxQALkMIACZLEAACWyAAAmMoAHovWAACe
        0AAkn8AALprBAC2Z1wAMr88AHKTEABqpxwAQpswABLDHAACi0wAAo9UAAKXUAACm2AAAqdsAAKvcABGh
        1QAFu9QAI6PCACShwQAjpMEAL6PDACmj2wAljuAAKY7kACOX5AApkucAIpvlACCf5gAnlugAJprpACSe
        6gAfpOcAHajoABut6QAfrO0AALDhAAC05gAAuOoAALnsABe36wAZsuoAHLHtABq27gAXuOsAFb3sABi8
        8AAio+sAJKDqACCo7ABFosIARaXEAE2iwgBXqMUAdK/LAHmyzQAKyuUAC83rABHD6wATwu4AEcXuAALQ
        4wAG0egAB9frAA/M8AAWwvEAFMjzABLN9AAN0vEAC9byAA/U9QAK2/MADtj2AAzd9wAQ0vUAAubyAAbk
        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
        AH//AAB//4AA///AA///+A//
</value>
  </data>
</root>